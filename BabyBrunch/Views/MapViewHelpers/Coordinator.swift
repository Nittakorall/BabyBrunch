//
//  Coordinator.swift
//  BabyBrunch
//
//  Created by KiwiComp on 2025-05-19.
//

import Foundation
import SwiftUI
import MapKit
import FirebaseAuth

class Coordinator: NSObject, MKMapViewDelegate, UIGestureRecognizerDelegate {

    var parent : UIKitMapView
    //Stores which pin was last tapped to detect double taps and open a detail view
    private var lastSelectedAnnotation: MKAnnotation?
    
    let authVM: AuthViewModel
    
    @Binding var showAlert: Bool
    @Binding var alertTitle : String
    @Binding var alertMessage: String
    @Binding var selectedVenue : MKMapItem?
    @StateObject var vm = LocationViewModel()
    @Binding var selectedPin: Pin?
    /*
     In classes, you must write an init(...) manually where you bind @Binding variables yourself.
     @Binding is just a wrapper, and you must use _variableName = ... to bind it.
     Note how we use underscores (_showAlert) to assign bindings to properties.
     */
    init(
        parent: UIKitMapView,
        showAlert: Binding<Bool>,
        alertTitle: Binding<String>,
        alertMessage: Binding<String>,
        selectedVenue: Binding<MKMapItem?>,
        selectedPin: Binding<Pin?>,
        authVM: AuthViewModel) {
            self.parent = parent
            _showAlert = showAlert
            _alertTitle = alertTitle
            _alertMessage = alertMessage
            _selectedVenue = selectedVenue
            _selectedPin = selectedPin
            self.authVM = authVM
        }
    
    let region = MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 59.8609, longitude: 17.6486),
        span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
    )
    /*
     This function:
     ‚úÖ Runs when the user taps on the map.
     ‚úÖ Gets the screen location (in pixels) of the tap.
     ‚úÖ Converts it to a real latitude/longitude.
     ‚úÖ You can then use the coordinate to:
     Search nearby
     Add a pin
     Show information
     And more.
     */
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView?{
        guard !(annotation is MKUserLocation) else { return nil}
        let identifier = "customPin"
        
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)
        
        if annotationView == nil{
            annotationView = MKAnnotationView(annotation: annotation, reuseIdentifier: identifier)
            annotationView?.canShowCallout = true
            annotationView?.calloutOffset = CGPoint(x: 0, y: 25) //move callout up and down
            let pinView = MapPinView()
            let controller = UIHostingController(rootView: pinView)
            controller.view.frame = CGRect(x: 0, y: 0, width: 40, height: 70) //size on the callout
            controller.view.backgroundColor = .clear
            let renderer = UIGraphicsImageRenderer(size: controller.view.bounds.size)
            let image = renderer.image { context in
                controller.view.drawHierarchy(in: controller.view.bounds, afterScreenUpdates: true)}
            annotationView?.image = image
            annotationView?.centerOffset = CGPoint(x: 0, y: -35) //-35 to make the point at the coordinate
            
            //Kallar p√• handleAnnotationTap vid klick p√• annotationviewen
            let tap = UITapGestureRecognizer(target: self, action: #selector(handleAnnotationTap(_:)))
            annotationView?.addGestureRecognizer(tap)
            
        } else {
            annotationView?.annotation = annotation
        }
        return annotationView
    }
    
    @objc func handleTap(_ gestureRecognizer: UITapGestureRecognizer) { // @objc: G√∂r funktionen tillg√§nglig f√∂r Objective-C runtime ‚Äì n√∂dv√§ndigt f√∂r att koppla den till t.ex. en UITapGestureRecognizer. handleTap: Namnet p√• funktionen som k√∂rs n√§r anv√§ndaren trycker p√• kartan. gestureRecognizer: UITapGestureRecognizer: Det objekt som skickas in n√§r en "tap" har uppt√§ckts.
        
        parent.vm.mapShouldBeUpdated = false
        
        guard let mapView = gestureRecognizer.view as? MKMapView else { return } // gestureRecognizer.view: Ger dig den UIView som gesterna sker p√•. as? MKMapView: F√∂rs√∂ker type-casta till en MKMapView. guard let ... else { return }: Om casten misslyckas (dvs. om gesten inte sker p√• en karta), s√• avslutas funktionen direkt. Detta skyddar koden fr√•n att krascha.‚úÖ Resultat: Nu har du en referens till den karta (mapView) som anv√§ndaren tryckt p√•.
        let location = gestureRecognizer.location(in: mapView) // gestureRecognizer.location(in: mapView): H√§mtar x/y-koordinaten (i pixlar) f√∂r var p√• mapView anv√§ndaren tryckt.
        
        let coordinate = mapView.convert(location, toCoordinateFrom: mapView) // mapView.convert(...): √ñvers√§tter CGPoint-positionen (i pixlar) till en CLLocationCoordinate2D, allts√• en latitud och longitud. toCoordinateFrom: mapView: S√§ger att konverteringen ska utg√• fr√•n det koordinatsystemet som kartan har. ‚úÖ Resultat: Du har nu en CLLocationCoordinate2D (ex: lat: 59.86, long: 17.64) ‚Äì allts√• den exakta geografiska platsen d√§r anv√§ndaren tryckte.
        let tappedCoordinate = coordinate
      
       //Stops search and prevents adding a new pin if user tapped on an existing pin
        if let tappedView = mapView.hitTest(location, with: nil),
           tappedView is MKAnnotationView {
            return
        }
        
        //checks if the user is guest before searching.
        if Auth.auth().currentUser?.isAnonymous == true || authVM.currentUser?.isSignedUp == false {
            DispatchQueue.main.async {
                self.authVM.authError = .guestNotAllowed
            }
            return
        }
       
        let span = MKCoordinateSpan(latitudeDelta: 0.001, longitudeDelta: 0.001)
        let smallRegion = MKCoordinateRegion(center: tappedCoordinate, span: span)
        /*
         This code:
         ‚úÖ Creates a search request object.
         ‚úÖ Limits the search to the visible map area.
         ‚úÖ Includes all types of POIs.
         ‚úÖ Filters for restaurants.
         */
        let request = MKLocalPointsOfInterestRequest(coordinateRegion: smallRegion)
        request.pointOfInterestFilter = MKPointOfInterestFilter(including: [.restaurant, .cafe])
        
        
        
        /*
         ‚úÖ You send the search request to Apple Maps using search.start(...).
         ‚úÖ You wait asynchronously for the result.
         ‚úÖ When the result arrives:
         - If places are found: you get them via response.mapItems.
         - If an error occurs: you print the error to the console.
         */
        let search = MKLocalSearch(request: request) // Du skapar en instans av MKLocalSearch och ger den en s√∂kf√∂rfr√•gan (request) som du tidigare konfigurerat. Det √§r nu du f√∂rbereder sj√§lva s√∂kningen som ska k√∂ras. T√§nk p√• detta som att du skriver in n√•got i Apple Maps appen ‚Äì men √§nnu inte tryckt "S√∂k".
        search.start { response, error in // Den h√§r raden startar sj√§lva s√∂kningen. Den k√∂rs asynkront (i bakgrunden). Det betyder: du skickar s√∂kningen, och n√§r resultatet kommer tillbaka k√∂rs det som finns inom { ... } (slutklamrarna). Du f√•r tillbaka tv√• saker: response: Svaret fr√•n Apple Maps om platser den hittade. error: Ett eventuellt fel som uppstod under s√∂kningen. üí° Viktigt: Detta √§r en closure, vilket i Swift √§r som en liten funktion du skickar med och som k√∂rs senare.
            guard let items = response?.mapItems else { return } // response?.mapItems: Om svaret (response) existerar, h√§mtar vi listan √∂ver resultat (mapItems). mapItems √§r en array av MKMapItem ‚Äì varje ett s√•dant representerar en plats, t.ex. en restaurang. guard let ... else { return }: Om mapItems inte finns (dvs. om response √§r nil), s√• avbryts funktionen direkt.
            if let error = error {
                print("S√∂kfel: \(error.localizedDescription)")
                return
            }
                        
            /*
             ‚úÖ Finds the MKMapItem in items that is closest to where the user tapped on the map.
             ‚úÖ Creates an annotation for that place.
             ‚úÖ Displays it as a pin on the map.
             */
            if let nearest = items.min(by: { // items √§r en array av MKMapItem (resultat fr√•n en MKLocalSearch). .min(by:) returnerar det minsta elementet baserat p√• ett j√§mf√∂relsekriterium. Det du skickar in i { ... } √§r en j√§mf√∂relse mellan tv√• MKMapItem-objekt, d√§r du s√§ger --> a √§r mindre √§n b om a ligger n√§rmare coordinate √§n b. $0 och $1 √§r tv√• MKMapItem-objekt. placemark.coordinate h√§mtar CLLocationCoordinate2D f√∂r varje. .distance(to:) √§r en custom extension (definierad i din kod) som r√§knar ut avst√•ndet i meter mellan tv√• koordinater. üìå Resultat: Du f√•r det MKMapItem-objekt som ligger n√§rmast coordinate. Om vi hittade n√•gon plats (dvs. items var inte tom), d√•: G√• in i blocket. Annars ‚Üí ignorera.
                $0.placemark.coordinate.distance(to: coordinate) <
                    $1.placemark.coordinate.distance(to: coordinate)
            }) {
              
              //Check for if a pin with the same name within the given distance already exists. currently set at 30 meters around.
             //If it already exists return out of the tapGesture again.
             let pinAlreadyExists = mapView.annotations.contains(where: { annotation in
                 guard let title = annotation.title ?? nil else { return false }
                 
                 let sameName = title == nearest.name
                 let closeDistance = annotation.coordinate.distance(to: nearest.placemark.coordinate) < 30
                 
                 return sameName && closeDistance
             })
             
             if pinAlreadyExists {
                 print("Pin already exists")
                 return
             }
                
                DispatchQueue.main.async { // Du g√∂r detta f√∂r att uppdatera UI:t p√• huvudtr√•den. Exempelvis: l√§gga till en pin p√• kartan.
             //       self.vm.mapShouldBeUpdated = false
                    self.selectedVenue = nearest
                    self.alertTitle = nearest.placemark.name ?? "Unknown"
                    self.alertMessage = "Do you want to add a pin for \(nearest.placemark.name ?? "Unknown")?"
                    self.showAlert = true
                }
            }
        }
    }
    
    //Called when a pin is tapped and stores the last tapped pin to track double taps
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        lastSelectedAnnotation = view.annotation
    }
    
    
    //Keeps track of which pin was tapped and whether it was the first or second tap
    @objc func handleAnnotationTap(_ gesture: UITapGestureRecognizer) {
        guard let view = gesture.view as? MKAnnotationView,
              let annotation = view.annotation as? PinAnnotation,
              let pin = annotation.pin else { return }
        
        //Check if the tap is on the same pin as last time
        guard let last = lastSelectedAnnotation,
              last === annotation else {
            return
        }
        
        //Triggers a sheet in MapView if it's the second tap on the same pin
        selectedPin = pin
    }
}



extension CLLocationCoordinate2D {
    func distance(to other: CLLocationCoordinate2D) -> CLLocationDistance {
        // This defines an instance method called distance(to:) that returns a CLLocationDistance (which is just a typealias for Double ‚Äì the distance in meters.) The parameter 'other' is the coordinate you want to compare with.
        // Create CLLocation instances. These are converted from CLLocationCoordinate2D to CLLocation,
        // because only CLLocation has the .distance(from:) method.
        // CLLocationCoordinate2D does not natively support distance calculation, but CLLocation does.
        let a = CLLocation(latitude: latitude, longitude: longitude) // 'self' (the coordinate this method is called on) becomes point A.
        let b = CLLocation(latitude: other.latitude, longitude: other.longitude) // 'other' becomes point B.

        // Use CLLocation's method .distance(from:) to calculate the distance in meters between A and B.
        return a.distance(from: b)
    }
}
