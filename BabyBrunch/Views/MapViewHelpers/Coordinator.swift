//
//  Coordinator.swift
//  BabyBrunch
//
//  Created by KiwiComp on 2025-05-19.
//

import Foundation
import SwiftUI
import MapKit

class Coordinator: NSObject, MKMapViewDelegate, UIGestureRecognizerDelegate {

    var parent : UIKitMapView
    
    @Binding var showAlert: Bool
    @Binding var alertTitle : String
    @Binding var alertMessage: String
    @Binding var selectedVenue : MKMapItem?
    @StateObject var vm = LocationViewModel()
    /*
     I klasser m√•ste du sj√§lv skriva en init(...) d√§r du binder @Binding-variablerna manuellt. @Binding √§r bara en "wrapper", och du m√•ste deklarera den med _variabelnamn = ....
     Notera hur vi anv√§nder understreck (_showAlert) f√∂r att koppla bindningen till egenskaperna.
     */
    init(
        parent: UIKitMapView,
        showAlert: Binding<Bool>,
        alertTitle: Binding<String>,
        alertMessage: Binding<String>,
        selectedVenue: Binding<MKMapItem?>) {
            self.parent = parent
            _showAlert = showAlert
            _alertTitle = alertTitle
            _alertMessage = alertMessage
            _selectedVenue = selectedVenue
        }
    
    let region = MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 59.8609, longitude: 17.6486),
        span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
    )
    /*
     Denna funktion:
     ‚úÖ K√∂rs n√§r anv√§ndaren trycker p√• kartan.
     ‚úÖ H√§mtar platsen (i pixlar) d√§r anv√§ndaren tryckte.
     ‚úÖ √ñvers√§tter den till en riktig latitud/longitud.
     ‚úÖ Du kan sedan anv√§nda coordinate f√∂r att:
     S√∂ka i n√§rheten
     L√§gga till en pin
     Visa information
     Med mera.
     */
    @objc func handleTap(_ gestureRecognizer: UITapGestureRecognizer) { // @objc: G√∂r funktionen tillg√§nglig f√∂r Objective-C runtime ‚Äì n√∂dv√§ndigt f√∂r att koppla den till t.ex. en UITapGestureRecognizer. handleTap: Namnet p√• funktionen som k√∂rs n√§r anv√§ndaren trycker p√• kartan. gestureRecognizer: UITapGestureRecognizer: Det objekt som skickas in n√§r en "tap" har uppt√§ckts.
        
        parent.vm.mapShouldBeUpdated = false
        
        guard let mapView = gestureRecognizer.view as? MKMapView else { return } // gestureRecognizer.view: Ger dig den UIView som gesterna sker p√•. as? MKMapView: F√∂rs√∂ker type-casta till en MKMapView. guard let ... else { return }: Om casten misslyckas (dvs. om gesten inte sker p√• en karta), s√• avslutas funktionen direkt. Detta skyddar koden fr√•n att krascha.‚úÖ Resultat: Nu har du en referens till den karta (mapView) som anv√§ndaren tryckt p√•.
        let location = gestureRecognizer.location(in: mapView) // gestureRecognizer.location(in: mapView): H√§mtar x/y-koordinaten (i pixlar) f√∂r var p√• mapView anv√§ndaren tryckt.
        let coordinate = mapView.convert(location, toCoordinateFrom: mapView) // mapView.convert(...): √ñvers√§tter CGPoint-positionen (i pixlar) till en CLLocationCoordinate2D, allts√• en latitud och longitud. toCoordinateFrom: mapView: S√§ger att konverteringen ska utg√• fr√•n det koordinatsystemet som kartan har. ‚úÖ Resultat: Du har nu en CLLocationCoordinate2D (ex: lat: 59.86, long: 17.64) ‚Äì allts√• den exakta geografiska platsen d√§r anv√§ndaren tryckte.
        let tappedCoordinate = coordinate
      
       //This check stops the tap search from going off if its close to a nearby annotation. Currently set at 5 meters around.
       //If its on a POI that already has a pin then returns out of the tapGesture
       let nearbyAnnotations = mapView.annotations.filter {
           $0.coordinate.distance(to: tappedCoordinate) < 5
       }
       
       if !nearbyAnnotations.isEmpty {
           print("Tap on pin ignore POI search")
           return
       }
       
        let span = MKCoordinateSpan(latitudeDelta: 0.001, longitudeDelta: 0.001)
        let smallRegion = MKCoordinateRegion(center: tappedCoordinate, span: span)
        /*
         Den h√§r koden:
         ‚úÖ Skapar ett s√∂kobjekt (en f√∂rfr√•gan).
         ‚úÖ Begr√§nsar s√∂kningen till den synliga kartytan.
         ‚úÖ Inkluderar alla typer av POI.
         ‚úÖ Letar efter restauranger.
         */
        let request = MKLocalPointsOfInterestRequest(coordinateRegion: smallRegion)
        request.pointOfInterestFilter = MKPointOfInterestFilter(including: [.restaurant, .cafe])
        
        /*
         ‚úÖ Du skickar iv√§g s√∂kningen till Apple Maps med search.start(...).
         ‚úÖ Du v√§ntar asynkront p√• svar.
         ‚úÖ N√§r svaret kommer:
         - Om svaret inneh√•ller platser: du h√§mtar dem via response.mapItems.
         - Om n√•got g√•r fel: du skriver ut felet i konsolen.
         */
        let search = MKLocalSearch(request: request) // Du skapar en instans av MKLocalSearch och ger den en s√∂kf√∂rfr√•gan (request) som du tidigare konfigurerat. Det √§r nu du f√∂rbereder sj√§lva s√∂kningen som ska k√∂ras. T√§nk p√• detta som att du skriver in n√•got i Apple Maps appen ‚Äì men √§nnu inte tryckt "S√∂k".
        search.start { response, error in // Den h√§r raden startar sj√§lva s√∂kningen. Den k√∂rs asynkront (i bakgrunden). Det betyder: du skickar s√∂kningen, och n√§r resultatet kommer tillbaka k√∂rs det som finns inom { ... } (slutklamrarna). Du f√•r tillbaka tv√• saker: response: Svaret fr√•n Apple Maps om platser den hittade. error: Ett eventuellt fel som uppstod under s√∂kningen. üí° Viktigt: Detta √§r en closure, vilket i Swift √§r som en liten funktion du skickar med och som k√∂rs senare.
            guard let items = response?.mapItems else { return } // response?.mapItems: Om svaret (response) existerar, h√§mtar vi listan √∂ver resultat (mapItems). mapItems √§r en array av MKMapItem ‚Äì varje ett s√•dant representerar en plats, t.ex. en restaurang. guard let ... else { return }: Om mapItems inte finns (dvs. om response √§r nil), s√• avbryts funktionen direkt.
            if let error = error {
                print("S√∂kfel: \(error.localizedDescription)")
                return
            }
                        
            /*
             ‚úÖ Hitta den plats (MKMapItem) i items som ligger n√§rmast den plats du tryckte p√• i kartan ‚Äì allts√• coordinate.
             ‚úÖ Skapar en annotation f√∂r den platsen
             ‚úÖ Visar den som en pin p√• kartan
             */
            if let nearest = items.min(by: { // items √§r en array av MKMapItem (resultat fr√•n en MKLocalSearch). .min(by:) returnerar det minsta elementet baserat p√• ett j√§mf√∂relsekriterium. Det du skickar in i { ... } √§r en j√§mf√∂relse mellan tv√• MKMapItem-objekt, d√§r du s√§ger --> a √§r mindre √§n b om a ligger n√§rmare coordinate √§n b. $0 och $1 √§r tv√• MKMapItem-objekt. placemark.coordinate h√§mtar CLLocationCoordinate2D f√∂r varje. .distance(to:) √§r en custom extension (definierad i din kod) som r√§knar ut avst√•ndet i meter mellan tv√• koordinater. üìå Resultat: Du f√•r det MKMapItem-objekt som ligger n√§rmast coordinate. Om vi hittade n√•gon plats (dvs. items var inte tom), d√•: G√• in i blocket. Annars ‚Üí ignorera.
                $0.placemark.coordinate.distance(to: coordinate) <
                    $1.placemark.coordinate.distance(to: coordinate)
            }) {
              
              //Check for if a pin with the same name within the given distance already exists. currently set at 30 meters around.
             //If it already exists return out of the tapGesture again.
             let pinAlreadyExists = mapView.annotations.contains(where: { annotation in
                 guard let title = annotation.title ?? nil else { return false }
                 
                 let sameName = title == nearest.name
                 let closeDistance = annotation.coordinate.distance(to: nearest.placemark.coordinate) < 30
                 
                 return sameName && closeDistance
             })
             
             if pinAlreadyExists {
                 print("Pin already exists")
                 return
             }
                
                DispatchQueue.main.async { // Du g√∂r detta f√∂r att uppdatera UI:t p√• huvudtr√•den. Exempelvis: l√§gga till en pin p√• kartan.
             //       self.vm.mapShouldBeUpdated = false
                    self.selectedVenue = nearest
                    self.alertTitle = nearest.placemark.name ?? "Unknown"
                    self.alertMessage = "Do you want to add a pin for \(nearest.placemark.name ?? "Unknown")?"
                    self.showAlert = true
                }
            }
        }
    }
}



extension CLLocationCoordinate2D {
    func distance(to other: CLLocationCoordinate2D) -> CLLocationDistance { // Du skapar en instansmetod kallad distance(to:). Den returnerar CLLocationDistance (vilket √§r bara en typalias f√∂r Double ‚Äì avst√•nd i meter). Parametern other √§r den koordinat du vill j√§mf√∂ra med.
        // Skapa CLLocation-instanser. Dessa omvandlas till CLLocation, eftersom endast CLLocation har .distance(from:)-metoden. CLLocationCoordinate2D har inte inbyggt st√∂d f√∂r att r√§kna avst√•nd. Men CLLocation har det.
        let a = CLLocation(latitude: latitude, longitude: longitude) // self (dvs. den aktuella CLLocationCoordinate2D som du anropar metoden p√•) blir punkt a.
        let b = CLLocation(latitude: other.latitude, longitude: other.longitude) // other √§r punkt b.
        return a.distance(from: b) // Anv√§nder CLLocation‚Äôs metod .distance(from:) f√∂r att ber√§kna avst√•nd i meter mellan a och b.
    }
}
